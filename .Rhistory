}
cacheSolve <- function(x, ...) {
# Matrix inversion is usually a costly computation and there may be some benefit
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
source("ProgrammingAssignment2/cachematrix.R")
source('~/DataScience/ProgrammingAssignment2/cachematrix.R')
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
my_matrix$getInverse()
source('~/DataScience/ProgrammingAssignment2/cachematrix.R')
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
my_matrix$getinverse()
cacheSolve(my_matrix)
my_matrix$getinverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$getinverse()
cacheSolve(my_matrix)
my_matrix$getinverse()
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
# 4. get the value of inverse of the matrix
source('~/DataScience/ProgrammingAssignment2/cachematrix.R')
source('~/DataScience/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix <- function(x = matrix()) {
